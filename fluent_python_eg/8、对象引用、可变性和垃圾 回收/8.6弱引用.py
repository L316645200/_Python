# 正是因为有引用，对象才会在内存中存在。当对象的引用数量归零后， 垃圾回收程序会把对象销毁。
# 但是，有时需要引用对象，而不让对象存 在的时间超过所需时间。这经常用在缓存中。 弱引用不会增加对象的引用数量。
# 引用的目标对象称为所指对象 （referent）。因此我们说，弱引用不会妨碍所指对象被当作垃圾回收。
# 弱引用在缓存应用中很有用，因为我们不想仅因为被缓存引用着而始终 保存缓存对象。

# 示例 8-17 弱引用是可调用的对象，返回的是被引用的对象；如果 所指对象不存在了，返回 None
import weakref

a_set = {0, 1}
wref = weakref.ref(a_set)
print(wref)
print(wref())
a_set = {2, 3, 4}

print(wref())  # None    和命令行操作({0, 1})有所差别

print(wref() is None)
print(wref() is None)
