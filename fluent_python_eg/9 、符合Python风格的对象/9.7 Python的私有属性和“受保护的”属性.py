# Python 不能像 Java 那样使用 private 修饰符创建私有属性，但是 Python 有个简单的机制，能避免子类意外覆盖“私有”属性。
# # 举个例子。有人编写了一个名为 Dog 的类，这个类的内部用到了 mood 实例属性，但是没有将其开放。
# # 现在，你创建了 Dog 类的子 类：Beagle。如果你在毫不知情的情况下又创建了名为 mood 的实例属 性，那么在继承的方法中就会把 Dog 类的 mood 属性覆盖掉。这是个难 以调试的问题。
# # 为了避免这种情况，如果以 __mood 的形式（两个前导下划线，尾部没 有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的 __dict__ 属性中，而且会在前面加上一个下划线和类名。
# # 因此，对 Dog 类来说，__mood 会变成 _Dog__mood；对 Beagle 类来说，会变成 _Beagle__mood。这个语言特性叫名称改写（name mangling）。

# 示例 9-10 私有属性的名称会被“改写”，在前面加上下划线和类名

